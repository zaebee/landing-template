syntax = "proto3";

package sads.v1; // Define a package for SADS specific messages

// Enum for common spacing tokens
enum SadsSpacingToken {
  SPACING_TOKEN_UNSPECIFIED = 0; // Default, should not be used directly for styling
  SPACING_TOKEN_NONE = 1;        // "0"
  SPACING_TOKEN_XS = 2;          // "0.25rem"
  SPACING_TOKEN_S = 3;           // "0.5rem"
  SPACING_TOKEN_M = 4;           // "1rem"
  SPACING_TOKEN_L = 5;           // "1.5rem"
  SPACING_TOKEN_XL = 6;          // "2rem"
  SPACING_TOKEN_XXL = 7;         // "4rem"
  SPACING_TOKEN_AUTO = 8;        // "auto"
}

// Enum for common color semantic tokens (simplified for now)
// These would map to keys in the theme's color palette.
enum SadsColorToken {
  COLOR_TOKEN_UNSPECIFIED = 0;
  COLOR_TOKEN_TRANSPARENT = 1;
  COLOR_TOKEN_SURFACE = 2;
  COLOR_TOKEN_SURFACE_DARK = 3;
  COLOR_TOKEN_SURFACE_ACCENT = 4;
  COLOR_TOKEN_SURFACE_ACCENT_DARK = 5;
  COLOR_TOKEN_TEXT_PRIMARY = 6;
  COLOR_TOKEN_TEXT_PRIMARY_DARK = 7;
  COLOR_TOKEN_TEXT_ACCENT = 8;
  COLOR_TOKEN_TEXT_ACCENT_DARK = 9;
  COLOR_TOKEN_BORDER_ACCENT = 10; // Example, could be derived
}

// Enum for font weight tokens
enum SadsFontWeightToken {
  FONT_WEIGHT_TOKEN_UNSPECIFIED = 0;
  FONT_WEIGHT_TOKEN_NORMAL = 1; // "400"
  FONT_WEIGHT_TOKEN_BOLD = 2;   // "700"
}

// Enum for border radius tokens
enum SadsBorderRadiusToken {
  BORDER_RADIUS_TOKEN_UNSPECIFIED = 0;
  BORDER_RADIUS_TOKEN_NONE = 1; // "0"
  BORDER_RADIUS_TOKEN_S = 2;    // "4px"
  BORDER_RADIUS_TOKEN_M = 3;    // "8px"
  BORDER_RADIUS_TOKEN_L = 4;    // "16px"
}

// Represents a single SADS attribute value, which can be a predefined token
// or a custom string (e.g., "custom:10px", "custom:#ABCDEF", "custom:cover").
// We could also add specific types like float for numbers if strict typing is needed for custom values.
message SadsAttributeValue {
  oneof value_type {
    SadsSpacingToken spacing_token = 1;
    SadsColorToken color_token = 2;
    SadsFontWeightToken font_weight_token = 3;
    SadsBorderRadiusToken border_radius_token = 4;
    string font_size_value = 5;       // For font sizes like "1rem", "1.2em", or theme keys like "l"
    string custom_value = 6;          // For any other CSS value or theme keys not covered by enums
                                      // e.g., "center" for text-align, "flex" for display, specific pixel/rem values.
                                      // Could also be used for theme keys like "shadow.medium" if not making specific enums.
  }
}

// A collection of SADS attributes for an element.
// The keys in the map would be SADS property keys like "backgroundColor", "padding", "fontSize",
// "borderRadius", "fontWeight", "textAlign", "display", etc.
// These keys would correspond to what the SADS engine expects.
// The SADS engine would then map these property keys to actual CSS properties.
message SadsStylingSet {
  map<string, SadsAttributeValue> attributes = 1;
}

// For responsive rules, we might define something like this:
message SadsResponsiveStyle {
  string breakpoint_key = 1; // e.g., "mobile", "tablet", or a raw media query. Maps to theme.breakpoints
  SadsStylingSet styles = 2; // The SADS attributes to apply at this breakpoint
}

message SadsElementStyles {
  optional SadsStylingSet base_styles = 1;
  repeated SadsResponsiveStyle responsive_styles = 2;
  // optional string element_selector_override = 3; // If not using generated sads-id-*
}

// Example of how an AI might specify styling for an element,
// or how an element's full SADS config could be represented.
// This could be serialized to JSON for an API or used internally.
// The SADS engine would then parse this to apply styles.
// For HTML data-sads-* attributes, the engine would parse individual string attributes
// and internally try to map them to this structured representation for validation/processing.
// For example, data-sads-padding="m" would map to an SadsAttributeValue with spacing_token = SPACING_TOKEN_M.
// data-sads-bg-color="custom:#FFF" would map to an SadsAttributeValue with custom_value = "#FFF" (after stripping "custom:").
// The SADS engine would need logic to determine which field in SadsAttributeValue to use based on the property key.
// e.g. if key is "padding", expect spacing_token or custom_value. if "bgColor", expect color_token or custom_value.

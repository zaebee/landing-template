// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "portfolio_item.proto" (package "website_content.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TitledBlock } from "./common";
import { Image } from "./common";
/**
 * @generated from protobuf message website_content.v1.PortfolioItem
 */
export interface PortfolioItem {
  /**
   * @generated from protobuf field: string id = 1
   */
  id: string;
  /**
   * @generated from protobuf field: website_content.v1.Image image = 2
   */
  image?: Image;
  /**
   * @generated from protobuf field: website_content.v1.TitledBlock details = 3
   */
  details?: TitledBlock;
}
// @generated message type with reflection information, may provide speed optimized methods
class PortfolioItem$Type extends MessageType<PortfolioItem> {
  constructor() {
    super("website_content.v1.PortfolioItem", [
      { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "image", kind: "message", T: () => Image },
      { no: 3, name: "details", kind: "message", T: () => TitledBlock },
    ]);
  }
  create(value?: PartialMessage<PortfolioItem>): PortfolioItem {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.id = "";
    if (value !== undefined)
      reflectionMergePartial<PortfolioItem>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PortfolioItem
  ): PortfolioItem {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string id */ 1:
          message.id = reader.string();
          break;
        case /* website_content.v1.Image image */ 2:
          message.image = Image.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.image
          );
          break;
        case /* website_content.v1.TitledBlock details */ 3:
          message.details = TitledBlock.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.details
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PortfolioItem,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string id = 1; */
    if (message.id !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.id);
    /* website_content.v1.Image image = 2; */
    if (message.image)
      Image.internalBinaryWrite(
        message.image,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* website_content.v1.TitledBlock details = 3; */
    if (message.details)
      TitledBlock.internalBinaryWrite(
        message.details,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message website_content.v1.PortfolioItem
 */
export const PortfolioItem = new PortfolioItem$Type();
